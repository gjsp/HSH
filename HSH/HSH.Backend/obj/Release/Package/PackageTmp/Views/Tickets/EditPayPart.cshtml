@model HSH.Data.Models.TicketPayPartialViewModels
@{
    ViewBag.Title = "การจ่ายเงิน";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (HSH.Backend.Helper.SessionHelper.CurrentUserInfo != null)
    {
        ViewBag.Title = HSH.Backend.Helper.SessionHelper.CurrentUserInfo.UserPageRole + " " + ViewBag.Title;
    }
}

<h3>@ViewBag.Title</h3>
<hr />

@using (Html.BeginForm("EditPayPart", "Tickets", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "frmEditPayPart" }))
{
    @Html.AntiForgeryToken()
    @Html.Partial("ViewTicketPay", Model.TicketDetail)

    <div class="form-horizontal">
        @Html.HiddenFor(model => model.TicketId)
        @Html.HiddenFor(model => model.Price)

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.PayType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.PayType, (SelectList)ViewBag.PayTypeList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PayType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="divBank">
            @Html.LabelFor(model => model.PayDetail.CompanyBankId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.PayDetail.CompanyBankId, (SelectList)ViewBag.BankList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PayDetail.CompanyBankId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="divFinance">
            <div class="form-group">
                @Html.LabelFor(model => model.PayDetail.PayBankName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayBankName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayBankName, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.PayDetail.PayAccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayAccountNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayAccountNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PayDetail.PayAccountName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayAccountName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayAccountName, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.PayDetail.PayAccountType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayAccountType, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayAccountType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PayDetail.PayBankBranch, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayBankBranch, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayBankBranch, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.PayDetail.PayTransRef, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayTransRef, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayTransRef, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">

                @Html.LabelFor(model => model.PayDetail.PayDate, htmlAttributes: new { @class = "control-label col-md-2", @for = "PayDate" })
                <div class="col-md-3">
                    <div class="input-group date" id="PayDate" data-date-format="MM/DD/YYYY">
                        @Html.TextBoxFor(model => model.PayDetail.PayDate, new { @class = "form-control", @readonly = "readonly" })
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                </div>
                @Html.LabelFor(model => model.PayDetail.PayTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.PayDetail.PayTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PayDetail.PayTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divPayCheque">
                <div class="form-group">
                    @Html.LabelFor(model => model.PayDetail.PayChequeNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.PayDetail.PayChequeNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PayDetail.PayChequeNo, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.PayDetail.PayDuedate, htmlAttributes: new { @class = "control-label col-md-2", @for = "PayDuedate" })
                    <div class="col-md-3">
                        <div class="input-group date" id="PayDuedate" data-date-format="MM/DD/YYYY">
                            @Html.TextBoxFor(model => model.PayDetail.PayDuedate, new { @class = "form-control", @readonly = "readonly" })
                            <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="bsDialog(this);" value="Submit" class="btn btn-default" style="width:100px" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "IndexPay") | @Html.ActionLink("Split", "EditPaySplit", new { id = Model.TicketId })
</div>
<br />
@if (Model.PayList != null)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered table-responsive">
            <tr class="info">
                <th class="text-center">วันที่</th>
                <th class="text-center">โดย</th>
                <th class="text-center">รหัส</th>
                <th class="text-center">ประเภทการจ่ายเงิน</th>
                <th class="text-center">จำนวนเงิน</th>
            </tr>
            @foreach (var item in Model.PayList)
            {
                <tr>
                    <td class="text-center">
                        @HSH.Data.Helper.StringHelper.ToStringDateTimeFormat(item.CreateDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserCreated.UserName)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.PayRef)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.PayType)
                    </td>
                    <td class="text-right">
                        @HSH.Data.Helper.StringHelper.ToStringCurrency(item.Amount.ToString())
                    </td>
                </tr>
            }
            @if (Model.PayList.Count() == 0)
            {
                <tr>
                    <td colspan="5" class="text-center text-danger"> @HSH.Data.Helper.StringHelper.stringNotFound.ToString() </td>
                </tr>
            }
            else
            {
                <tr class="active">
                    <th colspan="4" class="text-center">Total</th>
                    <th class="text-right">@HSH.Data.Helper.StringHelper.ToStringCurrency(Model.PayList.Where(t => t.Active == true).Sum(t => t.Amount).Value.ToString())</th>
                </tr>
            }

        </table>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script language="javascript" type="text/javascript">

        $(function () {
            if ('@HSH.Backend.Helper.SessionHelper.CurrentUserInfo.UserPageRole' == "Cashier") {
                $("#divBank").hide();
                $("#divFinance").hide();
            }

            $("#divPayCheque").hide();
            $('#PayType').change(function () {

                if (this.value == "Cheque") {
                    $("#PayBankBranch").text("");
                    $("#PayChequeNo").text("");
                    $("#PayDuedate").attr('selectedIndex', 0);
                    $("#divPayCheque").show();
                } else {
                    $("#divPayCheque").hide();
                }
            });

            $("#Amount").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                // 110 = .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            $('#PayDate').datetimepicker({
                useStrict: false,
                pickTime: false
            });

            $('#PayDuedate').datetimepicker({
                useStrict: false,
                pickTime: false
            });

            $("#PayDetail_PayAccountNo").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        });

        @*$("#Amount").blur(function (e) {
            //debugger;
            var a = this.value.replace(/[^\d\.\-\ ]/g, '');
            var p = '@Model.Price';
            var q = a / (p * 65.6);
            q = q - (q % 1);
            $("#Quantity").val(q);
        });*@

        $("#Amount").keyup(function (e) {
            var num = setFormatCurrency(this.value);
            this.value = num;
        });

        function setFormatCurrency(num) {
            if (num.length > 3) {
                num = num.replace(/[^\d\.\-\ ]/g, '');
                var numVal = parseInt(num);
                num = numVal.toString().split("").reverse().reduce(function (acc, num, i, orig) {
                    return num + (i && !(i % 3) ? "," : "") + acc;
                }, "");
            }
            return num;
        }



        var bsDialog = function (e) {

            //var type = $("input:radio[name=ReceiveType]:checked").val();
            var type = $("#PayType").val();
            //var quantity = $("#Quantity").val();
            //var qtyUnpaid = '@Model.QtyUnpaid';
            var amount = $("#Amount").val().replace(/[^\d\.\-\ ]/g, '');
            var amtUnpaid = '@Model.AmountUnPaid'.replace(/[^\d\.\-\ ]/g, '');
            var amtMsg = $("#Amount").val();

            if (parseInt(amount) < 1) {
                $('#' + e.id).button('reset');
                var dialogLimit = new BootstrapDialog({
                    message: 'โปรดใส่จำนวนที่มากกว่าศุนย์',
                    buttons: [{
                        label: 'Close',
                        action: function (dialogLimit) {
                            dialogLimit.close();
                        }
                    }]
                });
                dialogLimit.setType(BootstrapDialog.TYPE_WARNING);
                dialogLimit.open();
                return;
            }


            if (amount == "" || type == "" || amount.length > 10) {
                $("#frmEditPayPart").submit();
            } else {
                if (amtUnpaid <= 0) {
                    $('#' + e.id).button('reset');
                    var dialogLimit = new BootstrapDialog({
                        message: 'จ่ายเงินครบเรียบร้อยแล้ว',
                        buttons: [{
                            label: 'Close',
                            action: function (dialogLimit) {
                                dialogLimit.close();
                            }
                        }]
                    });
                    dialogLimit.setType(BootstrapDialog.TYPE_WARNING);
                    dialogLimit.open();
                }
                else if (parseInt(amount) > parseInt(amtUnpaid)) {

                    $('#' + e.id).button('reset');
                    var dialogLimit = new BootstrapDialog({
                        message: 'จำนวนมากกว่ายอดที่ต้องจ่าย โปรดใส่จำนวนให้ถูกต้อง',
                        buttons: [{
                            label: 'Close',
                            action: function (dialogLimit) {
                                dialogLimit.close();
                                $("#Amount").focus();
                            }
                        }]
                    });
                    dialogLimit.setType(BootstrapDialog.TYPE_WARNING);
                    dialogLimit.open();
                } else {
                    var msg = "คุณต้องการที่จะชำระเงิน จำนวน <B>" + amtMsg + "</B> บาท ?";
                    BootstrapDialog.show({
                        title: 'Comfirmation',
                        message: msg,
                        cssClass: 'comfirm-dialog',
                        buttons: [{
                            label: 'Cancel',
                            action: function (dialog) {
                                dialog.close();
                            }
                        }, {
                            label: 'OK',
                            cssClass: 'btn-primary',
                            action: function (dialog) {
                                $("#frmEditPayPart").submit();
                            }
                        }]
                    });
                }
            }
        }
    </script>
}



